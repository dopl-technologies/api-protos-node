// source: catheter_path_service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.dopltechnologies.protos.CatheterPath', null, global);
goog.exportSymbol('proto.dopltechnologies.protos.CreateCatheterPathRequest', null, global);
goog.exportSymbol('proto.dopltechnologies.protos.CreateCatheterPathResponse', null, global);
goog.exportSymbol('proto.dopltechnologies.protos.GetCatheterPathRequest', null, global);
goog.exportSymbol('proto.dopltechnologies.protos.GetCatheterPathResponse', null, global);
goog.exportSymbol('proto.dopltechnologies.protos.GetCoordinatesCatheterPathRequest', null, global);
goog.exportSymbol('proto.dopltechnologies.protos.GetCoordinatesCatheterPathResponse', null, global);
goog.exportSymbol('proto.dopltechnologies.protos.ListCatheterPathsRequest', null, global);
goog.exportSymbol('proto.dopltechnologies.protos.ListCatheterPathsResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dopltechnologies.protos.CreateCatheterPathRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dopltechnologies.protos.CreateCatheterPathRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dopltechnologies.protos.CreateCatheterPathRequest.displayName = 'proto.dopltechnologies.protos.CreateCatheterPathRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dopltechnologies.protos.CreateCatheterPathResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dopltechnologies.protos.CreateCatheterPathResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dopltechnologies.protos.CreateCatheterPathResponse.displayName = 'proto.dopltechnologies.protos.CreateCatheterPathResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dopltechnologies.protos.GetCatheterPathRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dopltechnologies.protos.GetCatheterPathRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dopltechnologies.protos.GetCatheterPathRequest.displayName = 'proto.dopltechnologies.protos.GetCatheterPathRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dopltechnologies.protos.GetCatheterPathResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dopltechnologies.protos.GetCatheterPathResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dopltechnologies.protos.GetCatheterPathResponse.displayName = 'proto.dopltechnologies.protos.GetCatheterPathResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dopltechnologies.protos.GetCoordinatesCatheterPathRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dopltechnologies.protos.GetCoordinatesCatheterPathRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dopltechnologies.protos.GetCoordinatesCatheterPathRequest.displayName = 'proto.dopltechnologies.protos.GetCoordinatesCatheterPathRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dopltechnologies.protos.GetCoordinatesCatheterPathResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dopltechnologies.protos.GetCoordinatesCatheterPathResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dopltechnologies.protos.GetCoordinatesCatheterPathResponse.displayName = 'proto.dopltechnologies.protos.GetCoordinatesCatheterPathResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dopltechnologies.protos.ListCatheterPathsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dopltechnologies.protos.ListCatheterPathsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dopltechnologies.protos.ListCatheterPathsRequest.displayName = 'proto.dopltechnologies.protos.ListCatheterPathsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dopltechnologies.protos.ListCatheterPathsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dopltechnologies.protos.ListCatheterPathsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dopltechnologies.protos.ListCatheterPathsResponse.displayName = 'proto.dopltechnologies.protos.ListCatheterPathsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.dopltechnologies.protos.CatheterPath = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.dopltechnologies.protos.CatheterPath, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.dopltechnologies.protos.CatheterPath.displayName = 'proto.dopltechnologies.protos.CatheterPath';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dopltechnologies.protos.CreateCatheterPathRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.dopltechnologies.protos.CreateCatheterPathRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dopltechnologies.protos.CreateCatheterPathRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dopltechnologies.protos.CreateCatheterPathRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: (f = msg.getPath()) && proto.dopltechnologies.protos.CatheterPath.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dopltechnologies.protos.CreateCatheterPathRequest}
 */
proto.dopltechnologies.protos.CreateCatheterPathRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dopltechnologies.protos.CreateCatheterPathRequest;
  return proto.dopltechnologies.protos.CreateCatheterPathRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dopltechnologies.protos.CreateCatheterPathRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dopltechnologies.protos.CreateCatheterPathRequest}
 */
proto.dopltechnologies.protos.CreateCatheterPathRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.dopltechnologies.protos.CatheterPath;
      reader.readMessage(value,proto.dopltechnologies.protos.CatheterPath.deserializeBinaryFromReader);
      msg.setPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dopltechnologies.protos.CreateCatheterPathRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dopltechnologies.protos.CreateCatheterPathRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dopltechnologies.protos.CreateCatheterPathRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dopltechnologies.protos.CreateCatheterPathRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.dopltechnologies.protos.CatheterPath.serializeBinaryToWriter
    );
  }
};


/**
 * optional CatheterPath path = 1;
 * @return {?proto.dopltechnologies.protos.CatheterPath}
 */
proto.dopltechnologies.protos.CreateCatheterPathRequest.prototype.getPath = function() {
  return /** @type{?proto.dopltechnologies.protos.CatheterPath} */ (
    jspb.Message.getWrapperField(this, proto.dopltechnologies.protos.CatheterPath, 1));
};


/**
 * @param {?proto.dopltechnologies.protos.CatheterPath|undefined} value
 * @return {!proto.dopltechnologies.protos.CreateCatheterPathRequest} returns this
*/
proto.dopltechnologies.protos.CreateCatheterPathRequest.prototype.setPath = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dopltechnologies.protos.CreateCatheterPathRequest} returns this
 */
proto.dopltechnologies.protos.CreateCatheterPathRequest.prototype.clearPath = function() {
  return this.setPath(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dopltechnologies.protos.CreateCatheterPathRequest.prototype.hasPath = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dopltechnologies.protos.CreateCatheterPathResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.dopltechnologies.protos.CreateCatheterPathResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dopltechnologies.protos.CreateCatheterPathResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dopltechnologies.protos.CreateCatheterPathResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dopltechnologies.protos.CreateCatheterPathResponse}
 */
proto.dopltechnologies.protos.CreateCatheterPathResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dopltechnologies.protos.CreateCatheterPathResponse;
  return proto.dopltechnologies.protos.CreateCatheterPathResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dopltechnologies.protos.CreateCatheterPathResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dopltechnologies.protos.CreateCatheterPathResponse}
 */
proto.dopltechnologies.protos.CreateCatheterPathResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dopltechnologies.protos.CreateCatheterPathResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dopltechnologies.protos.CreateCatheterPathResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dopltechnologies.protos.CreateCatheterPathResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dopltechnologies.protos.CreateCatheterPathResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.dopltechnologies.protos.CreateCatheterPathResponse.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.dopltechnologies.protos.CreateCatheterPathResponse} returns this
 */
proto.dopltechnologies.protos.CreateCatheterPathResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dopltechnologies.protos.GetCatheterPathRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.dopltechnologies.protos.GetCatheterPathRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dopltechnologies.protos.GetCatheterPathRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dopltechnologies.protos.GetCatheterPathRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dopltechnologies.protos.GetCatheterPathRequest}
 */
proto.dopltechnologies.protos.GetCatheterPathRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dopltechnologies.protos.GetCatheterPathRequest;
  return proto.dopltechnologies.protos.GetCatheterPathRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dopltechnologies.protos.GetCatheterPathRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dopltechnologies.protos.GetCatheterPathRequest}
 */
proto.dopltechnologies.protos.GetCatheterPathRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dopltechnologies.protos.GetCatheterPathRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dopltechnologies.protos.GetCatheterPathRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dopltechnologies.protos.GetCatheterPathRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dopltechnologies.protos.GetCatheterPathRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.dopltechnologies.protos.GetCatheterPathRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.dopltechnologies.protos.GetCatheterPathRequest} returns this
 */
proto.dopltechnologies.protos.GetCatheterPathRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dopltechnologies.protos.GetCatheterPathResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.dopltechnologies.protos.GetCatheterPathResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dopltechnologies.protos.GetCatheterPathResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dopltechnologies.protos.GetCatheterPathResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: (f = msg.getPath()) && proto.dopltechnologies.protos.CatheterPath.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dopltechnologies.protos.GetCatheterPathResponse}
 */
proto.dopltechnologies.protos.GetCatheterPathResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dopltechnologies.protos.GetCatheterPathResponse;
  return proto.dopltechnologies.protos.GetCatheterPathResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dopltechnologies.protos.GetCatheterPathResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dopltechnologies.protos.GetCatheterPathResponse}
 */
proto.dopltechnologies.protos.GetCatheterPathResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.dopltechnologies.protos.CatheterPath;
      reader.readMessage(value,proto.dopltechnologies.protos.CatheterPath.deserializeBinaryFromReader);
      msg.setPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dopltechnologies.protos.GetCatheterPathResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dopltechnologies.protos.GetCatheterPathResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dopltechnologies.protos.GetCatheterPathResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dopltechnologies.protos.GetCatheterPathResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.dopltechnologies.protos.CatheterPath.serializeBinaryToWriter
    );
  }
};


/**
 * optional CatheterPath path = 1;
 * @return {?proto.dopltechnologies.protos.CatheterPath}
 */
proto.dopltechnologies.protos.GetCatheterPathResponse.prototype.getPath = function() {
  return /** @type{?proto.dopltechnologies.protos.CatheterPath} */ (
    jspb.Message.getWrapperField(this, proto.dopltechnologies.protos.CatheterPath, 1));
};


/**
 * @param {?proto.dopltechnologies.protos.CatheterPath|undefined} value
 * @return {!proto.dopltechnologies.protos.GetCatheterPathResponse} returns this
*/
proto.dopltechnologies.protos.GetCatheterPathResponse.prototype.setPath = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dopltechnologies.protos.GetCatheterPathResponse} returns this
 */
proto.dopltechnologies.protos.GetCatheterPathResponse.prototype.clearPath = function() {
  return this.setPath(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dopltechnologies.protos.GetCatheterPathResponse.prototype.hasPath = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dopltechnologies.protos.GetCoordinatesCatheterPathRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.dopltechnologies.protos.GetCoordinatesCatheterPathRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dopltechnologies.protos.GetCoordinatesCatheterPathRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dopltechnologies.protos.GetCoordinatesCatheterPathRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dopltechnologies.protos.GetCoordinatesCatheterPathRequest}
 */
proto.dopltechnologies.protos.GetCoordinatesCatheterPathRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dopltechnologies.protos.GetCoordinatesCatheterPathRequest;
  return proto.dopltechnologies.protos.GetCoordinatesCatheterPathRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dopltechnologies.protos.GetCoordinatesCatheterPathRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dopltechnologies.protos.GetCoordinatesCatheterPathRequest}
 */
proto.dopltechnologies.protos.GetCoordinatesCatheterPathRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dopltechnologies.protos.GetCoordinatesCatheterPathRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dopltechnologies.protos.GetCoordinatesCatheterPathRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dopltechnologies.protos.GetCoordinatesCatheterPathRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dopltechnologies.protos.GetCoordinatesCatheterPathRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.dopltechnologies.protos.GetCoordinatesCatheterPathRequest.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.dopltechnologies.protos.GetCoordinatesCatheterPathRequest} returns this
 */
proto.dopltechnologies.protos.GetCoordinatesCatheterPathRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dopltechnologies.protos.GetCoordinatesCatheterPathResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.dopltechnologies.protos.GetCoordinatesCatheterPathResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dopltechnologies.protos.GetCoordinatesCatheterPathResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dopltechnologies.protos.GetCoordinatesCatheterPathResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    coordinate: (f = msg.getCoordinate()) && common_pb.CatheterCoordinates.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dopltechnologies.protos.GetCoordinatesCatheterPathResponse}
 */
proto.dopltechnologies.protos.GetCoordinatesCatheterPathResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dopltechnologies.protos.GetCoordinatesCatheterPathResponse;
  return proto.dopltechnologies.protos.GetCoordinatesCatheterPathResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dopltechnologies.protos.GetCoordinatesCatheterPathResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dopltechnologies.protos.GetCoordinatesCatheterPathResponse}
 */
proto.dopltechnologies.protos.GetCoordinatesCatheterPathResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.CatheterCoordinates;
      reader.readMessage(value,common_pb.CatheterCoordinates.deserializeBinaryFromReader);
      msg.setCoordinate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dopltechnologies.protos.GetCoordinatesCatheterPathResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dopltechnologies.protos.GetCoordinatesCatheterPathResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dopltechnologies.protos.GetCoordinatesCatheterPathResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dopltechnologies.protos.GetCoordinatesCatheterPathResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCoordinate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.CatheterCoordinates.serializeBinaryToWriter
    );
  }
};


/**
 * optional CatheterCoordinates coordinate = 1;
 * @return {?proto.dopltechnologies.protos.CatheterCoordinates}
 */
proto.dopltechnologies.protos.GetCoordinatesCatheterPathResponse.prototype.getCoordinate = function() {
  return /** @type{?proto.dopltechnologies.protos.CatheterCoordinates} */ (
    jspb.Message.getWrapperField(this, common_pb.CatheterCoordinates, 1));
};


/**
 * @param {?proto.dopltechnologies.protos.CatheterCoordinates|undefined} value
 * @return {!proto.dopltechnologies.protos.GetCoordinatesCatheterPathResponse} returns this
*/
proto.dopltechnologies.protos.GetCoordinatesCatheterPathResponse.prototype.setCoordinate = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dopltechnologies.protos.GetCoordinatesCatheterPathResponse} returns this
 */
proto.dopltechnologies.protos.GetCoordinatesCatheterPathResponse.prototype.clearCoordinate = function() {
  return this.setCoordinate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dopltechnologies.protos.GetCoordinatesCatheterPathResponse.prototype.hasCoordinate = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dopltechnologies.protos.ListCatheterPathsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.dopltechnologies.protos.ListCatheterPathsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dopltechnologies.protos.ListCatheterPathsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dopltechnologies.protos.ListCatheterPathsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dopltechnologies.protos.ListCatheterPathsRequest}
 */
proto.dopltechnologies.protos.ListCatheterPathsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dopltechnologies.protos.ListCatheterPathsRequest;
  return proto.dopltechnologies.protos.ListCatheterPathsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dopltechnologies.protos.ListCatheterPathsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dopltechnologies.protos.ListCatheterPathsRequest}
 */
proto.dopltechnologies.protos.ListCatheterPathsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dopltechnologies.protos.ListCatheterPathsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dopltechnologies.protos.ListCatheterPathsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dopltechnologies.protos.ListCatheterPathsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dopltechnologies.protos.ListCatheterPathsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dopltechnologies.protos.ListCatheterPathsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.dopltechnologies.protos.ListCatheterPathsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dopltechnologies.protos.ListCatheterPathsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dopltechnologies.protos.ListCatheterPathsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: (f = msg.getPath()) && proto.dopltechnologies.protos.CatheterPath.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dopltechnologies.protos.ListCatheterPathsResponse}
 */
proto.dopltechnologies.protos.ListCatheterPathsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dopltechnologies.protos.ListCatheterPathsResponse;
  return proto.dopltechnologies.protos.ListCatheterPathsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dopltechnologies.protos.ListCatheterPathsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dopltechnologies.protos.ListCatheterPathsResponse}
 */
proto.dopltechnologies.protos.ListCatheterPathsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.dopltechnologies.protos.CatheterPath;
      reader.readMessage(value,proto.dopltechnologies.protos.CatheterPath.deserializeBinaryFromReader);
      msg.setPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dopltechnologies.protos.ListCatheterPathsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dopltechnologies.protos.ListCatheterPathsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dopltechnologies.protos.ListCatheterPathsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dopltechnologies.protos.ListCatheterPathsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.dopltechnologies.protos.CatheterPath.serializeBinaryToWriter
    );
  }
};


/**
 * optional CatheterPath path = 1;
 * @return {?proto.dopltechnologies.protos.CatheterPath}
 */
proto.dopltechnologies.protos.ListCatheterPathsResponse.prototype.getPath = function() {
  return /** @type{?proto.dopltechnologies.protos.CatheterPath} */ (
    jspb.Message.getWrapperField(this, proto.dopltechnologies.protos.CatheterPath, 1));
};


/**
 * @param {?proto.dopltechnologies.protos.CatheterPath|undefined} value
 * @return {!proto.dopltechnologies.protos.ListCatheterPathsResponse} returns this
*/
proto.dopltechnologies.protos.ListCatheterPathsResponse.prototype.setPath = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dopltechnologies.protos.ListCatheterPathsResponse} returns this
 */
proto.dopltechnologies.protos.ListCatheterPathsResponse.prototype.clearPath = function() {
  return this.setPath(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dopltechnologies.protos.ListCatheterPathsResponse.prototype.hasPath = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.dopltechnologies.protos.CatheterPath.prototype.toObject = function(opt_includeInstance) {
  return proto.dopltechnologies.protos.CatheterPath.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.dopltechnologies.protos.CatheterPath} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dopltechnologies.protos.CatheterPath.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    startcatheterdataid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    endcatheterdataid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    created: (f = msg.getCreated()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.dopltechnologies.protos.CatheterPath}
 */
proto.dopltechnologies.protos.CatheterPath.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.dopltechnologies.protos.CatheterPath;
  return proto.dopltechnologies.protos.CatheterPath.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.dopltechnologies.protos.CatheterPath} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.dopltechnologies.protos.CatheterPath}
 */
proto.dopltechnologies.protos.CatheterPath.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStartcatheterdataid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEndcatheterdataid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.dopltechnologies.protos.CatheterPath.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.dopltechnologies.protos.CatheterPath.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.dopltechnologies.protos.CatheterPath} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.dopltechnologies.protos.CatheterPath.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getStartcatheterdataid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getEndcatheterdataid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCreated();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 id = 1;
 * @return {number}
 */
proto.dopltechnologies.protos.CatheterPath.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.dopltechnologies.protos.CatheterPath} returns this
 */
proto.dopltechnologies.protos.CatheterPath.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 startCatheterDataID = 2;
 * @return {number}
 */
proto.dopltechnologies.protos.CatheterPath.prototype.getStartcatheterdataid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.dopltechnologies.protos.CatheterPath} returns this
 */
proto.dopltechnologies.protos.CatheterPath.prototype.setStartcatheterdataid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 endCatheterDataID = 3;
 * @return {number}
 */
proto.dopltechnologies.protos.CatheterPath.prototype.getEndcatheterdataid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.dopltechnologies.protos.CatheterPath} returns this
 */
proto.dopltechnologies.protos.CatheterPath.prototype.setEndcatheterdataid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.dopltechnologies.protos.CatheterPath.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.dopltechnologies.protos.CatheterPath} returns this
 */
proto.dopltechnologies.protos.CatheterPath.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional google.protobuf.Timestamp created = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.dopltechnologies.protos.CatheterPath.prototype.getCreated = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.dopltechnologies.protos.CatheterPath} returns this
*/
proto.dopltechnologies.protos.CatheterPath.prototype.setCreated = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.dopltechnologies.protos.CatheterPath} returns this
 */
proto.dopltechnologies.protos.CatheterPath.prototype.clearCreated = function() {
  return this.setCreated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.dopltechnologies.protos.CatheterPath.prototype.hasCreated = function() {
  return jspb.Message.getField(this, 5) != null;
};


goog.object.extend(exports, proto.dopltechnologies.protos);
